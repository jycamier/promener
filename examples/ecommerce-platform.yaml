version: "1.0"
info:
  title: "E-Commerce Platform Metrics"
  description: "Complete metrics documentation for ShopNow platform microservices"
  version: "2.0.0"

services:
  # API Gateway - Point d'entrée principal
  api-gateway:
    info:
      title: "API Gateway"
      description: "Kong API Gateway - Gère l'authentification, rate limiting et routing"
      version: "3.2.0"
      package: "ApiGateway.Metrics"
    servers:
      - url: "https://api.shopnow.com/metrics"
        description: "Production"
      - url: "https://api-staging.shopnow.com/metrics"
        description: "Staging"
      - url: "http://localhost:8080/metrics"
        description: "Local development"
    metrics:
      http_requests_total:
        namespace: gateway
        subsystem: http
        type: counter
        help: "Total HTTP requests through gateway"
        labels:
          method:
            description: "HTTP method (GET, POST, PUT, DELETE)"
          status_code:
            description: "HTTP status code"
          service:
            description: "Target microservice"
          route:
            description: "API route pattern"
        examples:
          promql:
            - query: 'rate(gateway_http_requests_total[5m])'
              description: "Request rate per second"
            - query: 'sum by (service) (rate(gateway_http_requests_total[5m]))'
              description: "Request rate by service"
          alerts:
            - name: "HighGatewayErrorRate"
              expr: 'rate(gateway_http_requests_total{status_code=~"5.."}[5m]) / rate(gateway_http_requests_total[5m]) > 0.01'
              description: "Gateway error rate above 1%"
              for: "5m"
              severity: "critical"

      http_request_duration_seconds:
        namespace: gateway
        subsystem: http
        type: histogram
        help: "HTTP request latency in seconds"
        labels:
          method:
            description: "HTTP method"
          service:
            description: "Target microservice"
        buckets: [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5]
        examples:
          promql:
            - query: 'histogram_quantile(0.95, rate(gateway_http_request_duration_seconds_bucket[5m]))'
              description: "95th percentile latency"
          alerts:
            - name: "HighGatewayLatency"
              expr: 'histogram_quantile(0.95, rate(gateway_http_request_duration_seconds_bucket[5m])) > 1'
              description: "P95 latency above 1 second"
              for: "10m"
              severity: "warning"

      rate_limit_exceeded_total:
        namespace: gateway
        subsystem: ratelimit
        type: counter
        help: "Number of rate limit exceeded events"
        labels:
          client_id:
            description: "Client identifier"
          endpoint:
            description: "API endpoint"

  # User Service - Gestion des utilisateurs
  user-service:
    info:
      title: "User Service"
      description: "Service de gestion des utilisateurs et authentification"
      version: "2.1.5"
      package: "UserService.Metrics"
    servers:
      - url: "https://users.shopnow.com/metrics"
        description: "Production"
      - url: "http://localhost:8081/metrics"
        description: "Local"
    metrics:
      user_registrations_total:
        namespace: users
        subsystem: accounts
        type: counter
        help: "Total user registrations"
        labels:
          registration_type:
            description: "Type (email, google, facebook, apple)"
          country:
            description: "User country code"
        examples:
          promql:
            - query: 'rate(users_accounts_user_registrations_total[1h])'
              description: "Registration rate per hour"
            - query: 'sum by (registration_type) (users_accounts_user_registrations_total)'
              description: "Registrations by type"

      login_attempts_total:
        namespace: users
        subsystem: auth
        type: counter
        help: "Total login attempts"
        labels:
          status:
            description: "Status (success, failed, blocked)"
          method:
            description: "Auth method (password, oauth, mfa)"
        examples:
          alerts:
            - name: "HighLoginFailureRate"
              expr: 'rate(users_auth_login_attempts_total{status="failed"}[5m]) > 10'
              description: "More than 10 failed logins per second"
              for: "5m"
              severity: "warning"

      active_sessions:
        namespace: users
        subsystem: sessions
        type: gauge
        help: "Number of active user sessions"
        labels:
          device_type:
            description: "Device (mobile, desktop, tablet)"

  # Product Service - Catalogue produits
  product-service:
    info:
      title: "Product Catalog Service"
      description: "Service de gestion du catalogue produits"
      version: "1.8.2"
      package: "ProductService.Metrics"
    servers:
      - url: "https://products.shopnow.com/metrics"
        description: "Production"
      - url: "http://localhost:8082/metrics"
        description: "Local"
    metrics:
      product_views_total:
        namespace: products
        subsystem: catalog
        type: counter
        help: "Total product page views"
        labels:
          category:
            description: "Product category"
          source:
            description: "Traffic source (search, recommendation, direct)"

      search_queries_total:
        namespace: products
        subsystem: search
        type: counter
        help: "Total product search queries"
        labels:
          result_count:
            description: "Results (0, 1-10, 11-50, 50+)"
        examples:
          promql:
            - query: 'rate(products_search_search_queries_total{result_count="0"}[5m]) / rate(products_search_search_queries_total[5m])'
              description: "Zero-result search rate"

      search_latency_seconds:
        namespace: products
        subsystem: search
        type: histogram
        help: "Product search latency"
        labels:
          index_type:
            description: "Search index (elasticsearch, algolia)"
        buckets: [0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2]

      inventory_level:
        namespace: products
        subsystem: inventory
        type: gauge
        help: "Current inventory level"
        labels:
          product_id:
            description: "Product SKU"
          warehouse:
            description: "Warehouse location"
        examples:
          alerts:
            - name: "LowInventory"
              expr: 'products_inventory_inventory_level < 10'
              description: "Product inventory below 10 units"
              severity: "warning"

  # Order Service - Gestion des commandes
  order-service:
    info:
      title: "Order Management Service"
      description: "Service de gestion du cycle de vie des commandes"
      version: "2.5.1"
      package: "OrderService.Metrics"
    servers:
      - url: "https://orders.shopnow.com/metrics"
        description: "Production"
      - url: "http://localhost:8083/metrics"
        description: "Local"
    metrics:
      orders_created_total:
        namespace: orders
        subsystem: lifecycle
        type: counter
        help: "Total orders created"
        labels:
          channel:
            description: "Sales channel (web, mobile, api)"
          country:
            description: "Shipping country"
        examples:
          promql:
            - query: 'rate(orders_lifecycle_orders_created_total[1h])'
              description: "Order creation rate per hour"
          alerts:
            - name: "LowOrderRate"
              expr: 'rate(orders_lifecycle_orders_created_total[1h]) < 5'
              description: "Order rate below 5 per hour"
              for: "30m"
              severity: "warning"

      order_value_euros:
        namespace: orders
        subsystem: business
        type: histogram
        help: "Order value in euros"
        labels:
          currency:
            description: "Original currency"
          channel:
            description: "Sales channel"
        buckets: [10, 25, 50, 100, 250, 500, 1000, 2500, 5000]
        examples:
          promql:
            - query: 'sum(rate(orders_business_order_value_euros_sum[1h]))'
              description: "Revenue per hour in euros"
            - query: 'histogram_quantile(0.50, rate(orders_business_order_value_euros_bucket[1h]))'
              description: "Median order value"

      order_processing_duration_seconds:
        namespace: orders
        subsystem: processing
        type: histogram
        help: "Time to process order"
        labels:
          status:
            description: "Final status (completed, cancelled, failed)"
        buckets: [1, 5, 10, 30, 60, 120, 300, 600]

      cart_abandonment_total:
        namespace: orders
        subsystem: cart
        type: counter
        help: "Shopping cart abandonments"
        labels:
          stage:
            description: "Stage (cart, checkout, payment)"
          device_type:
            description: "Device type"
        examples:
          promql:
            - query: 'rate(orders_cart_cart_abandonment_total[1h]) / rate(orders_lifecycle_orders_created_total[1h])'
              description: "Cart abandonment rate"

  # Payment Service - Gestion des paiements
  payment-service:
    info:
      title: "Payment Processing Service"
      description: "Service de traitement des paiements via Stripe et PayPal"
      version: "1.9.0"
      package: "PaymentService.Metrics"
    servers:
      - url: "https://payments.shopnow.com/metrics"
        description: "Production"
      - url: "https://payments-staging.shopnow.com/metrics"
        description: "Staging"
    metrics:
      payment_transactions_total:
        namespace: payments
        subsystem: processor
        type: counter
        help: "Total payment transactions"
        labels:
          provider:
            description: "Payment provider (stripe, paypal, adyen)"
          method:
            description: "Payment method (card, bank_transfer, wallet)"
          status:
            description: "Transaction status (success, declined, error)"
          currency:
            description: "Transaction currency"
        examples:
          promql:
            - query: 'rate(payments_processor_payment_transactions_total{status="declined"}[5m])'
              description: "Declined payment rate"
          alerts:
            - name: "HighPaymentDeclineRate"
              expr: 'rate(payments_processor_payment_transactions_total{status="declined"}[5m]) / rate(payments_processor_payment_transactions_total[5m]) > 0.10'
              description: "Payment decline rate above 10%"
              for: "15m"
              severity: "critical"

      payment_amount_euros:
        namespace: payments
        subsystem: processor
        type: histogram
        help: "Payment amount in euros"
        labels:
          provider:
            description: "Payment provider"
          method:
            description: "Payment method"
        buckets: [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000]

      payment_processing_duration_seconds:
        namespace: payments
        subsystem: processor
        type: histogram
        help: "Payment processing duration"
        labels:
          provider:
            description: "Payment provider"
        buckets: [0.1, 0.5, 1, 2, 5, 10, 30]
        examples:
          alerts:
            - name: "SlowPaymentProcessing"
              expr: 'histogram_quantile(0.95, rate(payments_processor_payment_processing_duration_seconds_bucket[5m])) > 10'
              description: "P95 payment processing time above 10 seconds"
              for: "10m"
              severity: "warning"

      refund_transactions_total:
        namespace: payments
        subsystem: refunds
        type: counter
        help: "Total refund transactions"
        labels:
          reason:
            description: "Refund reason (customer_request, fraud, error)"
          status:
            description: "Refund status"

  # Notification Service - Envoi de notifications
  notification-service:
    info:
      title: "Notification Service"
      description: "Service d'envoi de notifications (email, SMS, push)"
      version: "1.5.3"
      package: "NotificationService.Metrics"
    servers:
      - url: "https://notifications.shopnow.com/metrics"
        description: "Production"
      - url: "http://localhost:8084/metrics"
        description: "Local"
    metrics:
      notifications_sent_total:
        namespace: notifications
        subsystem: delivery
        type: counter
        help: "Total notifications sent"
        labels:
          channel:
            description: "Notification channel (email, sms, push, webhook)"
          template:
            description: "Template name"
          status:
            description: "Delivery status (sent, failed, bounced)"
        examples:
          promql:
            - query: 'rate(notifications_delivery_notifications_sent_total{status="failed"}[5m])'
              description: "Failed notification rate"
          alerts:
            - name: "HighNotificationFailureRate"
              expr: 'rate(notifications_delivery_notifications_sent_total{status="failed"}[5m]) / rate(notifications_delivery_notifications_sent_total[5m]) > 0.05'
              description: "Notification failure rate above 5%"
              for: "10m"
              severity: "warning"

      notification_queue_size:
        namespace: notifications
        subsystem: queue
        type: gauge
        help: "Number of notifications in queue"
        labels:
          priority:
            description: "Priority level (high, normal, low)"
        examples:
          alerts:
            - name: "NotificationQueueBacklog"
              expr: 'notifications_queue_notification_queue_size > 10000'
              description: "More than 10k notifications in queue"
              for: "5m"
              severity: "warning"

      email_delivery_duration_seconds:
        namespace: notifications
        subsystem: email
        type: histogram
        help: "Email delivery time"
        labels:
          provider:
            description: "Email provider (sendgrid, ses, mailgun)"
        buckets: [0.5, 1, 2, 5, 10, 30, 60]
