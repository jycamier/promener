// <auto-generated>
// This code was generated by Promener
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Prometheus;
using System;

namespace metrics
{
    /// <summary>
    /// Interface for Http.Server metrics
    /// </summary>
    public interface IHttpServerMetrics
    {
        /// <summary>Observe a value for request_duration_seconds</summary>
        void ObserveRequestDurationSeconds(string method, string endpoint, double value);
        /// <summary>Set active_connections to a specific value</summary>
        void SetActiveConnections(string protocol, double value);
        /// <summary>Increment active_connections by 1</summary>
        void IncActiveConnections(string protocol);
        /// <summary>Decrement active_connections by 1</summary>
        void DecActiveConnections(string protocol);
        /// <summary>Add a value to active_connections</summary>
        void AddActiveConnections(string protocol, double value);
        /// <summary>Subtract a value from active_connections</summary>
        void SubActiveConnections(string protocol, double value);
        /// <summary>Observe a value for response_size_bytes</summary>
        void ObserveResponseSizeBytes(string method, double value);
        /// <summary>Increment requests_total by 1</summary>
        void IncRequestsTotal(string method, string status, string endpoint);
        /// <summary>Increment requests_total by a specific value</summary>
        void AddRequestsTotal(string method, string status, string endpoint, double value);
    }
    /// <summary>
    /// Interface for Db.Postgres metrics
    /// </summary>
    public interface IDbPostgresMetrics
    {
        /// <summary>Increment queries_total by 1</summary>
        void IncQueriesTotal(string operation, string table);
        /// <summary>Increment queries_total by a specific value</summary>
        void AddQueriesTotal(string operation, string table, double value);
        /// <summary>Observe a value for query_duration_seconds</summary>
        void ObserveQueryDurationSeconds(string operation, string table, double value);
        /// <summary>Set connection_pool_size to a specific value</summary>
        void SetConnectionPoolSize(string state, double value);
        /// <summary>Increment connection_pool_size by 1</summary>
        void IncConnectionPoolSize(string state);
        /// <summary>Decrement connection_pool_size by 1</summary>
        void DecConnectionPoolSize(string state);
        /// <summary>Add a value to connection_pool_size</summary>
        void AddConnectionPoolSize(string state, double value);
        /// <summary>Subtract a value from connection_pool_size</summary>
        void SubConnectionPoolSize(string state, double value);
    }

    /// <summary>
    /// Implementation of Http.Server metrics
    /// </summary>
    public class HttpServerMetricsImpl : IHttpServerMetrics
    {
        private readonly Histogram _requestDurationSeconds;
        private readonly Gauge _activeConnections;
        private readonly Summary _responseSizeBytes;
        private readonly Counter _requestsTotal;

        public HttpServerMetricsImpl()
        {
            _requestDurationSeconds = Metrics.CreateHistogram(
                "http_server_request_duration_seconds",
                "HTTP request duration in seconds",
                new[] {"method", "endpoint" },
                new HistogramConfiguration
                {
                    Buckets = new[] {0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1, 2.5, 5, 10 }
                }
            );
            _activeConnections = Metrics.CreateGauge(
                "http_server_active_connections",
                "Number of active connections",
                new[] {"protocol" }
            );
            _responseSizeBytes = Metrics.CreateSummary(
                "http_server_response_size_bytes",
                "Response size in bytes",
                new[] {"method" },
                new SummaryConfiguration
                {
                    Objectives = new[]
                    {
                        new QuantileEpsilonPair(0.5, 0.05),
                        new QuantileEpsilonPair(0.9, 0.01),
                        new QuantileEpsilonPair(0.99, 0.001),
                    }
                }
            );
            _requestsTotal = Metrics.CreateCounter(
                "http_server_requests_total",
                "Total number of HTTP requests",
                new[] {"method", "status", "endpoint" }
            );
        }

        public void ObserveRequestDurationSeconds(string method, string endpoint, double value)
        {
            _requestDurationSeconds.WithLabels(method, endpoint).Observe(value);
        }

        public void SetActiveConnections(string protocol, double value)
        {
            _activeConnections.WithLabels(protocol).Set(value);
        }

        public void IncActiveConnections(string protocol)
        {
            _activeConnections.WithLabels(protocol).Inc();
        }

        public void DecActiveConnections(string protocol)
        {
            _activeConnections.WithLabels(protocol).Dec();
        }

        public void AddActiveConnections(string protocol, double value)
        {
            _activeConnections.WithLabels(protocol).Inc(value);
        }

        public void SubActiveConnections(string protocol, double value)
        {
            _activeConnections.WithLabels(protocol).Dec(value);
        }

        public void ObserveResponseSizeBytes(string method, double value)
        {
            _responseSizeBytes.WithLabels(method).Observe(value);
        }

        public void IncRequestsTotal(string method, string status, string endpoint)
        {
            _requestsTotal.WithLabels(method, status, endpoint).Inc();
        }

        public void AddRequestsTotal(string method, string status, string endpoint, double value)
        {
            _requestsTotal.WithLabels(method, status, endpoint).Inc(value);
        }
    }

    /// <summary>
    /// Implementation of Db.Postgres metrics
    /// </summary>
    public class DbPostgresMetricsImpl : IDbPostgresMetrics
    {
        private readonly Counter _queriesTotal;
        private readonly Histogram _queryDurationSeconds;
        private readonly Gauge _connectionPoolSize;

        public DbPostgresMetricsImpl()
        {
            _queriesTotal = Metrics.CreateCounter(
                "db_postgres_queries_total",
                "Total number of database queries",
                new[] {"operation", "table" }
            );
            _queryDurationSeconds = Metrics.CreateHistogram(
                "db_postgres_query_duration_seconds",
                "Database query duration in seconds",
                new[] {"operation", "table" },
                new HistogramConfiguration
                {
                    Buckets = new[] {0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5 }
                }
            );
            _connectionPoolSize = Metrics.CreateGauge(
                "db_postgres_connection_pool_size",
                "Current database connection pool size",
                new[] {"state" }
            );
        }

        public void IncQueriesTotal(string operation, string table)
        {
            _queriesTotal.WithLabels(operation, table).Inc();
        }

        public void AddQueriesTotal(string operation, string table, double value)
        {
            _queriesTotal.WithLabels(operation, table).Inc(value);
        }

        public void ObserveQueryDurationSeconds(string operation, string table, double value)
        {
            _queryDurationSeconds.WithLabels(operation, table).Observe(value);
        }

        public void SetConnectionPoolSize(string state, double value)
        {
            _connectionPoolSize.WithLabels(state).Set(value);
        }

        public void IncConnectionPoolSize(string state)
        {
            _connectionPoolSize.WithLabels(state).Inc();
        }

        public void DecConnectionPoolSize(string state)
        {
            _connectionPoolSize.WithLabels(state).Dec();
        }

        public void AddConnectionPoolSize(string state, double value)
        {
            _connectionPoolSize.WithLabels(state).Inc(value);
        }

        public void SubConnectionPoolSize(string state, double value)
        {
            _connectionPoolSize.WithLabels(state).Dec(value);
        }
    }

    /// <summary>
    /// Main metrics registry
    /// </summary>
    public class MetricsRegistry
    {
        public IHttpServerMetrics HttpServer { get; }
        public IDbPostgresMetrics DbPostgres { get; }

        private static readonly Lazy<MetricsRegistry> _instance =
            new Lazy<MetricsRegistry>(() => new MetricsRegistry());

        /// <summary>
        /// Gets the default singleton instance
        /// </summary>
        public static MetricsRegistry Default => _instance.Value;

        public MetricsRegistry()
        {
            HttpServer = new HttpServerMetricsImpl();
            DbPostgres = new DbPostgresMetricsImpl();
        }
    }
}
