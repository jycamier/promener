package generator

const registryTemplate = `// Code generated by promener. DO NOT EDIT.
package {{ .Info.Package }}

import (
	{{- if .NeedsOsImport }}
	"os"
	{{- end }}
	"sync"

	"github.com/prometheus/client_golang/prometheus"
)

var (
	once sync.Once
	registry *MetricsRegistry
)

// MetricsRegistry is the main registry containing all metrics organized by namespace
type MetricsRegistry struct {
	{{- range $ns := .Namespaces }}
	{{ $ns.Name }} *{{ $ns.Name }}Metrics
	{{- end }}
}

{{ range $ns := .Namespaces }}
// {{ $ns.Name }}Metrics contains all metrics for the {{ $ns.Name }} namespace
type {{ $ns.Name }}Metrics struct {
	{{- range $ss := $ns.Subsystems }}
	{{ $ss.Name }} {{ $ns.Name }}{{ $ss.Name }}Metrics
	{{- end }}
}
{{ end }}

{{ range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
// {{ $ns.Name }}{{ $ss.Name }}Metrics is the interface for {{ $ns.Name }}.{{ $ss.Name }} metrics
type {{ $ns.Name }}{{ $ss.Name }}Metrics interface {
	{{- range $m := $ss.Metrics }}
	{{- if eq $m.Type "counter" }}
	Inc{{ $m.MethodName }}({{ $m.MethodParams }})
	Add{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	{{- else if eq $m.Type "gauge" }}
	Set{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	Inc{{ $m.MethodName }}({{ $m.MethodParams }})
	Dec{{ $m.MethodName }}({{ $m.MethodParams }})
	Add{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	Sub{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	{{- else if eq $m.Type "histogram" }}
	Observe{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	{{- else if eq $m.Type "summary" }}
	Observe{{ $m.MethodName }}({{ $m.MethodParams }}, value float64)
	{{- end }}
	{{- end }}
}

// {{ $ns.Name }}{{ $ss.Name }}MetricsImpl is the concrete implementation of {{ $ns.Name }}{{ $ss.Name }}Metrics
type {{ $ns.Name }}{{ $ss.Name }}MetricsImpl struct {
	{{- range $m := $ss.Metrics }}
	{{ $m.FieldName }} *prometheus.{{ $m.VecType }}
	{{- end }}
}

// Verify interface compliance
var _ {{ $ns.Name }}{{ $ss.Name }}Metrics = (*{{ $ns.Name }}{{ $ss.Name }}MetricsImpl)(nil)

{{ end }}
{{- end }}

// NewMetricsRegistry creates a new metrics registry with the provided registerer
func NewMetricsRegistry(registerer prometheus.Registerer) *MetricsRegistry {
	once.Do(func() {
		registry = &MetricsRegistry{
			{{- range $ns := .Namespaces }}
			{{ $ns.Name }}: &{{ $ns.Name }}Metrics{
				{{- range $ss := $ns.Subsystems }}
				{{ $ss.Name }}: &{{ $ns.Name }}{{ $ss.Name }}MetricsImpl{
					{{- range $m := $ss.Metrics }}
					{{ $m.FieldName }}: {{ $m.Constructor }}(
						prometheus.{{ $m.OptsType }}{
							Namespace: "{{ $m.Namespace }}",
							Subsystem: "{{ $m.Subsystem }}",
							Name:      "{{ $m.Name }}",
							Help:      "{{ $m.Help }}",
							{{- if $m.ConstLabels }}
							ConstLabels: prometheus.Labels{
								{{- range $key, $val := $m.ConstLabels }}
								"{{ $key }}": {{ toGoCode $val }},
								{{- end }}
							},
							{{- end }}
							{{- if eq $m.Type "histogram" }}
							Buckets: []float64{ {{- range $i, $b := $m.Buckets }}{{ if $i }}, {{ end }}{{ $b }}{{ end -}} },
							{{- end }}
							{{- if eq $m.Type "summary" }}
							Objectives: map[float64]float64{ {{- range $q, $e := $m.Objectives }}{{ $q }}: {{ $e }}, {{ end -}} },
							{{- end }}
						},
						[]string{ {{- range $i, $l := $m.Labels }}{{ if $i }}, {{ end }}"{{ $l }}"{{ end -}} },
					),
					{{- end }}
				},
				{{- end }}
			},
			{{- end }}
		}
	})
	return registry
}

// Default returns the default metrics registry using prometheus.DefaultRegisterer
func Default() *MetricsRegistry {
	return NewMetricsRegistry(prometheus.DefaultRegisterer)
}

{{ range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
{{- range $m := $ss.Metrics }}
{{ if eq $m.Type "counter" }}
// Inc{{ $m.MethodName }} increments the {{ $m.FullName }} counter
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Inc{{ $m.MethodName }}({{ $m.MethodParams }}) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Inc()
}

// Add{{ $m.MethodName }} adds the given value to the {{ $m.FullName }} counter
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Add{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Add(value)
}
{{ else if eq $m.Type "gauge" }}
// Set{{ $m.MethodName }} sets the {{ $m.FullName }} gauge to the given value
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Set{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Set(value)
}

// Inc{{ $m.MethodName }} increments the {{ $m.FullName }} gauge by 1
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Inc{{ $m.MethodName }}({{ $m.MethodParams }}) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Inc()
}

// Dec{{ $m.MethodName }} decrements the {{ $m.FullName }} gauge by 1
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Dec{{ $m.MethodName }}({{ $m.MethodParams }}) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Dec()
}

// Add{{ $m.MethodName }} adds the given value to the {{ $m.FullName }} gauge
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Add{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Add(value)
}

// Sub{{ $m.MethodName }} subtracts the given value from the {{ $m.FullName }} gauge
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Sub{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Sub(value)
}
{{ else if eq $m.Type "histogram" }}
// Observe{{ $m.MethodName }} observes a value for the {{ $m.FullName }} histogram
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Observe{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Observe(value)
}
{{ else if eq $m.Type "summary" }}
// Observe{{ $m.MethodName }} observes a value for the {{ $m.FullName }} summary
func (m *{{ $ns.Name }}{{ $ss.Name }}MetricsImpl) Observe{{ $m.MethodName }}({{ $m.MethodParams }}, value float64) {
	m.{{ $m.FieldName }}.WithLabelValues({{ $m.MethodArgs }}).Observe(value)
}
{{ end }}
{{ end }}
{{- end }}
{{- end }}

{{- if .NeedsHelperFunc }}

// getEnvOrDefault returns the value of the environment variable or the default value if not set
func getEnvOrDefault(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
{{- end }}
`
