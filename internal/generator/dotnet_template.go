package generator

const dotnetTemplate = `// <auto-generated>
// This code was generated by Promener
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using Prometheus;
using System;

{{- define "dotnetDeprecated" }}
{{- if .Deprecated }}
        [Obsolete("{{ if .Deprecated.Since }}Since {{ .Deprecated.Since }}. {{ end }}{{ if .Deprecated.ReplacedBy }}Use {{ .Deprecated.ReplacedBy }} instead. {{ end }}{{ .Deprecated.Reason }}", error: false)]
{{- end }}
{{- end }}

namespace {{ .Info.Package }}
{
{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
    /// <summary>
    /// Interface for {{ $ns.Name }}.{{ $ss.Name }} metrics
    /// </summary>
    public interface I{{ $ns.Name }}{{ $ss.Name }}Metrics
    {
{{- range $m := $ss.Metrics }}
{{- if eq $m.Type "counter" }}
{{- template "dotnetDeprecated" $m }}
        /// <summary>Increment {{ $m.Name }} by 1</summary>
        void Inc{{ $m.MethodName }}({{ $m.DotNetMethodParams }});
{{- template "dotnetDeprecated" $m }}
        /// <summary>Increment {{ $m.Name }} by a specific value</summary>
        void Add{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value);
{{- end }}
{{- if eq $m.Type "gauge" }}
{{- template "dotnetDeprecated" $m }}
        /// <summary>Set {{ $m.Name }} to a specific value</summary>
        void Set{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value);
{{- template "dotnetDeprecated" $m }}
        /// <summary>Increment {{ $m.Name }} by 1</summary>
        void Inc{{ $m.MethodName }}({{ $m.DotNetMethodParams }});
{{- template "dotnetDeprecated" $m }}
        /// <summary>Decrement {{ $m.Name }} by 1</summary>
        void Dec{{ $m.MethodName }}({{ $m.DotNetMethodParams }});
{{- template "dotnetDeprecated" $m }}
        /// <summary>Add a value to {{ $m.Name }}</summary>
        void Add{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value);
{{- template "dotnetDeprecated" $m }}
        /// <summary>Subtract a value from {{ $m.Name }}</summary>
        void Sub{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value);
{{- end }}
{{- if or (eq $m.Type "histogram") (eq $m.Type "summary") }}
{{- template "dotnetDeprecated" $m }}
        /// <summary>Observe a value for {{ $m.Name }}</summary>
        void Observe{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value);
{{- end }}
{{- end }}
    }
{{- end }}
{{- end }}

{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}

    /// <summary>
    /// Implementation of {{ $ns.Name }}.{{ $ss.Name }} metrics
    /// </summary>
    public class {{ $ns.Name }}{{ $ss.Name }}MetricsImpl : I{{ $ns.Name }}{{ $ss.Name }}Metrics
    {
{{- range $m := $ss.Metrics }}
        private readonly {{ $m.VecType }} _{{ $m.FieldName }};
{{- end }}

        public {{ $ns.Name }}{{ $ss.Name }}MetricsImpl()
        {
{{- range $m := $ss.Metrics }}
            _{{ $m.FieldName }} = Metrics.Create{{ $m.VecType }}(
                "{{ $m.FullName }}",
                "{{ $m.Help }}"{{- if $m.Labels }},
                new[] { {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}"{{ $label }}"{{- end }} }{{- end }}
{{- if eq $m.Type "histogram" }}{{- if $m.Buckets }},
                new HistogramConfiguration
                {
                    Buckets = new[] { {{- range $i, $bucket := $m.Buckets }}{{if $i}}, {{end}}{{ $bucket }}{{- end }} }
                }{{- end }}{{- end }}
{{- if eq $m.Type "summary" }}{{- if $m.Objectives }},
                new SummaryConfiguration
                {
                    Objectives = new[]
                    {
{{- range $quantile, $epsilon := $m.Objectives }}
                        new QuantileEpsilonPair({{ $quantile }}, {{ $epsilon }}),
{{- end }}
                    }
                }{{- end }}{{- end }}
            );
{{- end }}
        }
{{- range $m := $ss.Metrics }}
{{- if eq $m.Type "counter" }}
{{- template "dotnetDeprecated" $m }}

        public void Inc{{ $m.MethodName }}({{ $m.DotNetMethodParams }})
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Inc();
            {{- else }}
            _{{ $m.FieldName }}.Inc();
            {{- end }}
        }
{{- template "dotnetDeprecated" $m }}

        public void Add{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value)
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Inc(value);
            {{- else }}
            _{{ $m.FieldName }}.Inc(value);
            {{- end }}
        }
{{- end }}
{{- if eq $m.Type "gauge" }}
{{- template "dotnetDeprecated" $m }}

        public void Set{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value)
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Set(value);
            {{- else }}
            _{{ $m.FieldName }}.Set(value);
            {{- end }}
        }
{{- template "dotnetDeprecated" $m }}

        public void Inc{{ $m.MethodName }}({{ $m.DotNetMethodParams }})
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Inc();
            {{- else }}
            _{{ $m.FieldName }}.Inc();
            {{- end }}
        }
{{- template "dotnetDeprecated" $m }}

        public void Dec{{ $m.MethodName }}({{ $m.DotNetMethodParams }})
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Dec();
            {{- else }}
            _{{ $m.FieldName }}.Dec();
            {{- end }}
        }
{{- template "dotnetDeprecated" $m }}

        public void Add{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value)
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Inc(value);
            {{- else }}
            _{{ $m.FieldName }}.Inc(value);
            {{- end }}
        }
{{- template "dotnetDeprecated" $m }}

        public void Sub{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value)
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Dec(value);
            {{- else }}
            _{{ $m.FieldName }}.Dec(value);
            {{- end }}
        }
{{- end }}
{{- if or (eq $m.Type "histogram") (eq $m.Type "summary") }}
{{- template "dotnetDeprecated" $m }}

        public void Observe{{ $m.MethodName }}({{ $m.DotNetMethodParams }}{{ if $m.Labels }}, {{ end }}double value)
        {
            {{- if $m.Labels }}
            _{{ $m.FieldName }}.WithLabels({{ $m.DotNetMethodArgs }}).Observe(value);
            {{- else }}
            _{{ $m.FieldName }}.Observe(value);
            {{- end }}
        }
{{- end }}
{{- end }}
    }
{{- end }}
{{- end }}

    /// <summary>
    /// Main metrics registry
    /// </summary>
    public class MetricsRegistry
    {
{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
        public I{{ $ns.Name }}{{ $ss.Name }}Metrics {{ $ns.Name }}{{ $ss.Name }} { get; }
{{- end }}
{{- end }}

        private static readonly Lazy<MetricsRegistry> _instance =
            new Lazy<MetricsRegistry>(() => new MetricsRegistry());

        /// <summary>
        /// Gets the default singleton instance
        /// </summary>
        public static MetricsRegistry Default => _instance.Value;

        public MetricsRegistry()
        {
{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
            {{ $ns.Name }}{{ $ss.Name }} = new {{ $ns.Name }}{{ $ss.Name }}MetricsImpl();
{{- end }}
{{- end }}
        }
    }
}
`
