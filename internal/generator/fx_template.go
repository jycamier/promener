package generator

const fxTemplate = `// Code generated by promener. DO NOT EDIT.
package {{ .Info.Package }}

import (
	"github.com/prometheus/client_golang/prometheus"
	"go.uber.org/fx"
)

// Module provides the metrics registry as an FX module
var Module = fx.Module("metrics",
	fx.Provide(
		NewMetricsRegistryForFx,
		{{- range $ns := .Namespaces }}
		{{- range $ss := $ns.Subsystems }}
		provide{{ $ns.Name }}{{ $ss.Name }}Metrics,
		{{- end }}
		{{- end }}
	),
)

// NewMetricsRegistryForFx creates a new metrics registry for FX dependency injection
// It uses prometheus.DefaultRegisterer by default
func NewMetricsRegistryForFx() *MetricsRegistry {
	return NewMetricsRegistry(prometheus.DefaultRegisterer)
}

{{ range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
// provide{{ $ns.Name }}{{ $ss.Name }}Metrics provides {{ $ns.Name }}{{ $ss.Name }}Metrics for FX injection
func provide{{ $ns.Name }}{{ $ss.Name }}Metrics(registry *MetricsRegistry) {{ $ns.Name }}{{ $ss.Name }}Metrics {
	return registry.{{ $ns.Name }}.{{ $ss.Name }}
}
{{ end }}
{{- end }}

// ModuleWithRegistry returns an FX module that uses a custom prometheus registerer
func ModuleWithRegistry(registerer prometheus.Registerer) fx.Option {
	return fx.Module("metrics",
		fx.Provide(
			func() *MetricsRegistry {
				return NewMetricsRegistry(registerer)
			},
			{{- range $ns := .Namespaces }}
			{{- range $ss := $ns.Subsystems }}
			provide{{ $ns.Name }}{{ $ss.Name }}Metrics,
			{{- end }}
			{{- end }}
		),
	)
}
`
