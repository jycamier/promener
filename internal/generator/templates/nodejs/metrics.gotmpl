// This code was generated by Promener
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

import { Registry, Counter, Gauge, Histogram, Summary } from 'prom-client';

{{- define "jsDocDeprecated" }}
{{- if .Deprecated }}
   * @deprecated {{ if .Deprecated.Since }}Since {{ .Deprecated.Since }}. {{ end }}{{ if .Deprecated.ReplacedBy }}Use {{ .Deprecated.ReplacedBy }} instead. {{ end }}{{ .Deprecated.Reason }}
{{- end }}
{{- end }}

{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}

/**
 * Interface for {{ $ns.Name }}.{{ $ss.Name }} metrics
 */
export interface I{{ $ns.Name }}{{ $ss.Name }}Metrics {
{{- range $m := $ss.Metrics }}
{{- if eq $m.Type "counter" }}
  /**
   * Increment {{ $m.Name }} by 1
{{- template "jsDocDeprecated" $m }}
   */
  inc{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void;

  /**
   * Increment {{ $m.Name }} by a specific value
{{- template "jsDocDeprecated" $m }}
   */
  add{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void;
{{- end }}
{{- if eq $m.Type "gauge" }}
  /**
   * Set {{ $m.Name }} to a specific value
{{- template "jsDocDeprecated" $m }}
   */
  set{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void;

  /**
   * Increment {{ $m.Name }} by 1
{{- template "jsDocDeprecated" $m }}
   */
  inc{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void;

  /**
   * Decrement {{ $m.Name }} by 1
{{- template "jsDocDeprecated" $m }}
   */
  dec{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void;

  /**
   * Add a value to {{ $m.Name }}
{{- template "jsDocDeprecated" $m }}
   */
  add{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void;

  /**
   * Subtract a value from {{ $m.Name }}
{{- template "jsDocDeprecated" $m }}
   */
  sub{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void;
{{- end }}
{{- if or (eq $m.Type "histogram") (eq $m.Type "summary") }}
  /**
   * Observe a value for {{ $m.Name }}
{{- template "jsDocDeprecated" $m }}
   */
  observe{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void;
{{- end }}
{{- end }}
}

/**
 * Implementation of {{ $ns.Name }}.{{ $ss.Name }} metrics
 */
export class {{ $ns.Name }}{{ $ss.Name }}MetricsImpl implements I{{ $ns.Name }}{{ $ss.Name }}Metrics {
{{- range $m := $ss.Metrics }}
  private readonly _{{ $m.FieldName }}: {{ $m.NodeJSType }};
{{- end }}

  constructor(registry: Registry) {
{{- range $m := $ss.Metrics }}
    this._{{ $m.FieldName }} = new {{ $m.NodeJSType }}({
      name: '{{ $m.FullName }}',
      help: '{{ $m.Help }}',
      registers: [registry],
{{- if $m.Labels }}
      labelNames: [{{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}'{{ $label }}'{{- end }}],
{{- end }}
{{- if eq $m.Type "histogram" }}{{- if $m.Buckets }}
      buckets: [{{- range $i, $bucket := $m.Buckets }}{{if $i}}, {{end}}{{ $bucket }}{{- end }}],
{{- end }}{{- end }}
{{- if eq $m.Type "summary" }}{{- if $m.Objectives }}
      percentiles: [{{- range $quantile, $epsilon := $m.Objectives }}{{ $quantile }}, {{- end }}],
{{- end }}{{- end }}
    });
{{- end }}
  }
{{- range $m := $ss.Metrics }}
{{- if eq $m.Type "counter" }}

  inc{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.inc({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} });
    {{- else }}
    this._{{ $m.FieldName }}.inc();
    {{- end }}
  }

  add{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.inc({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} }, value);
    {{- else }}
    this._{{ $m.FieldName }}.inc(value);
    {{- end }}
  }
{{- end }}
{{- if eq $m.Type "gauge" }}

  set{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.set({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} }, value);
    {{- else }}
    this._{{ $m.FieldName }}.set(value);
    {{- end }}
  }

  inc{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.inc({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} });
    {{- else }}
    this._{{ $m.FieldName }}.inc();
    {{- end }}
  }

  dec{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.dec({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} });
    {{- else }}
    this._{{ $m.FieldName }}.dec();
    {{- end }}
  }

  add{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.inc({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} }, value);
    {{- else }}
    this._{{ $m.FieldName }}.inc(value);
    {{- end }}
  }

  sub{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.dec({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} }, value);
    {{- else }}
    this._{{ $m.FieldName }}.dec(value);
    {{- end }}
  }
{{- end }}
{{- if or (eq $m.Type "histogram") (eq $m.Type "summary") }}

  observe{{ $m.MethodName }}({{ $m.NodeJSMethodParams }}{{ if $m.Labels }}, {{ end }}value: number): void {
    {{- if $m.Labels }}
    this._{{ $m.FieldName }}.observe({ {{- range $i, $label := $m.Labels }}{{if $i}}, {{end}}{{ $label }}{{- end }} }, value);
    {{- else }}
    this._{{ $m.FieldName }}.observe(value);
    {{- end }}
  }
{{- end }}
{{- end }}
}
{{- end }}
{{- end }}

/**
 * Main metrics registry
 */
export class MetricsRegistry {
  public readonly registry: Registry;
{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
  public readonly {{ $ns.Name | toLower }}{{ $ss.Name }}: I{{ $ns.Name }}{{ $ss.Name }}Metrics;
{{- end }}
{{- end }}

  private static _instance: MetricsRegistry | null = null;

  /**
   * Gets the default singleton instance
   */
  static get default(): MetricsRegistry {
    if (!MetricsRegistry._instance) {
      MetricsRegistry._instance = new MetricsRegistry();
    }
    return MetricsRegistry._instance;
  }

  constructor(registry?: Registry) {
    this.registry = registry || new Registry();
{{- range $ns := .Namespaces }}
{{- range $ss := $ns.Subsystems }}
    this.{{ $ns.Name | toLower }}{{ $ss.Name }} = new {{ $ns.Name }}{{ $ss.Name }}MetricsImpl(this.registry);
{{- end }}
{{- end }}
  }

  /**
   * Get metrics in Prometheus format
   */
  async getMetrics(): Promise<string> {
    return this.registry.metrics();
  }
}
